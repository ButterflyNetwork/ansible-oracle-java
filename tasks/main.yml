---
# file: tasks/main.yml
# Top-level installer for Oracle JDK.
#

- name: precondition - java_version
  fail: msg="ERROR - required variable 'java_version' missing."
  when: java_version is not defined

- name: precondition - java_subversion
  fail: msg="ERROR - required variable 'java_subversion' missing."
  when: java_version is not regex("\d+\.\d+\.\d+") and java_subversion is not defined

- name: precondition - java_install_jce
  fail: msg="ERROR - required variable 'java_install_jce' missing."
  when: java_install_jce is not defined

- include: set-role-variables.yml

- name: install libselinux-python binary for Ansible to work
  yum: name=libselinux-python state=present
  when: ansible_pkg_mgr == "yum"

# TODO: Support multiple JDK installations.
- name: check if specific version of Oracle JDK is installed? (non-Mac)
  block:
    - name: copy scripts to server
      copy: src="../files/check-java-version.sh"  dest="{{ java_download_path }}/"  mode="a+x"

    - name: get jdk_info
      shell: LC_ALL="en_US.UTF-8"  {{ java_download_path }}/check-java-version.sh  "{{ jdk_version }}"
      register: jdk_info
      changed_when: false
      failed_when: jdk_info.rc > 0

    - name: set jdk_already_installed
      set_fact:
        jdk_already_installed: "{{ (jdk_info.stdout|from_json).found | bool }}"
  when: ansible_os_family != "Darwin"

- name: check if specific version of Oracle JDK is installed? (Mac OS X)
  block:
    - name: get jdk_info
      shell: /usr/libexec/java_home -v "{{ jdk_version }}"
      register: jdk_info
      changed_when: false
      failed_when: false

    - name: set jdk_already_installed
      set_fact:
        jdk_already_installed: "{{ (jdk_info.rc == 0) | bool }}"
  when: ansible_os_family == "Darwin"

#- debug: var=jdk_already_installed

- include: install.yml
  when: not jdk_already_installed

- name: delegate to JCE zip installation process
  include: install_jce.yml
  when: java_install_jce
